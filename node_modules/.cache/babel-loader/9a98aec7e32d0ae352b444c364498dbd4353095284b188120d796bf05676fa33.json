{"ast":null,"code":"var _jsxFileName = \"/home/diane/Desktop/bizgo_front/src/pages/Authenticator.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // Function to update the login status in the context\n  const updateLoginStatus = status => {\n    setIsLoggedIn(status);\n  };\n\n  // Check if the user is already logged in using local storage\n  useEffect(() => {\n    const storedStatus = localStorage.getItem('isLoggedIn');\n    if (storedStatus) {\n      setIsLoggedIn(JSON.parse(storedStatus));\n    }\n  }, []);\n\n  // Save the login status to local storage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('isLoggedIn', JSON.stringify(isLoggedIn));\n  }, [isLoggedIn]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      updateLoginStatus\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"NS3kTTUAguel/g6wWMn3M2RoeGc=\");\n_c = AuthProvider;\nexport { AuthContext, AuthProvider };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isLoggedIn","setIsLoggedIn","updateLoginStatus","status","storedStatus","localStorage","getItem","JSON","parse","setItem","stringify","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/diane/Desktop/bizgo_front/src/pages/Authenticator.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nconst AuthProvider = ({ children }) => {\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n    // Function to update the login status in the context\n    const updateLoginStatus = (status) => {\n        setIsLoggedIn(status);\n    };\n\n    // Check if the user is already logged in using local storage\n    useEffect(() => {\n        const storedStatus = localStorage.getItem('isLoggedIn');\n        if (storedStatus) {\n            setIsLoggedIn(JSON.parse(storedStatus));\n        }\n    }, []);\n\n    // Save the login status to local storage whenever it changes\n    useEffect(() => {\n        localStorage.setItem('isLoggedIn', JSON.stringify(isLoggedIn));\n    }, [isLoggedIn]);\n\n    return (\n        <AuthContext.Provider value={{ isLoggedIn, updateLoginStatus }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport { AuthContext, AuthProvider };\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAEnC,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACA,MAAMU,iBAAiB,GAAIC,MAAM,IAAK;IAClCF,aAAa,CAACE,MAAM,CAAC;EACzB,CAAC;;EAED;EACAV,SAAS,CAAC,MAAM;IACZ,MAAMW,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IACvD,IAAIF,YAAY,EAAE;MACdH,aAAa,CAACM,IAAI,CAACC,KAAK,CAACJ,YAAY,CAAC,CAAC;IAC3C;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAX,SAAS,CAAC,MAAM;IACZY,YAAY,CAACI,OAAO,CAAC,YAAY,EAAEF,IAAI,CAACG,SAAS,CAACV,UAAU,CAAC,CAAC;EAClE,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,oBACIL,OAAA,CAACC,WAAW,CAACe,QAAQ;IAACC,KAAK,EAAE;MAAEZ,UAAU;MAAEE;IAAkB,CAAE;IAAAJ,QAAA,EAC1DA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAACjB,EAAA,CA1BIF,YAAY;AAAAoB,EAAA,GAAZpB,YAAY;AA4BlB,SAASD,WAAW,EAAEC,YAAY;AAAG,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}