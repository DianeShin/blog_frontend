{"ast":null,"code":"var _jsxFileName = \"/home/diane/Desktop/bizgo_front/src/pages/post/Blog.js\",\n  _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from \"react\";\nimport './Blog.css';\nimport { AuthContext } from \"../auth/Authenticator\";\nimport { Link } from \"react-router-dom\";\nimport { getUserById } from \"../auth/userHelper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Blog() {\n  _s();\n  const [blogPosts, setBlogPosts] = useState([]);\n  const [authors, setAuthors] = useState([]);\n  const {\n    userId\n  } = useContext(AuthContext);\n  useEffect(() => {\n    fetch(\"/fetchBlogPosts\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      if (response.status === 200) return response.json();else throw new Error(\"No posts.\");\n    }).then(posts => {\n      // Fetch author name for each post and update the state accordingly\n      const updatedPosts = Promise.all(posts.map(async post => {\n        const user = await getUserById(post.userId);\n        return {\n          ...post,\n          authorName: user.name\n        };\n      }));\n      setBlogPosts(updatedPosts);\n    }).catch(error => alert(error.message));\n  }, []);\n  function handleDelete(postId) {\n    const data = {\n      postId: postId,\n      userId: userId\n    };\n    fetch(\"/deleteBlogPost\", {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    }).then(response => response.text()).then(text => {\n      if (text === \"OK\") {\n        alert(\"Post deleted.\");\n        setBlogPosts(prevPosts => prevPosts.filter(post => post.postId !== postId));\n      } else alert(text);\n    }).catch(error => alert(\"Something didn't go right.\"));\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"blogTitle\",\n      children: \"Blog Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), blogPosts && blogPosts.reverse().map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blogDiv\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        className: \"postLink\",\n        to: post.title + \"/\" + post.postId,\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"postTitle\",\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 84\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"postContent\",\n        children: post.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"author\",\n        children: [\"By : \", post.authorName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this), userId === post.userId && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleDelete(post.postId),\n        children: \"Delete Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 49\n      }, this)]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true);\n}\n_s(Blog, \"+mXqSWukGCgWEpTpoTv+5Fy4GOY=\");\n_c = Blog;\nexport default Blog;\nvar _c;\n$RefreshReg$(_c, \"Blog\");","map":{"version":3,"names":["useContext","useEffect","useState","AuthContext","Link","getUserById","jsxDEV","_jsxDEV","Fragment","_Fragment","Blog","_s","blogPosts","setBlogPosts","authors","setAuthors","userId","fetch","method","headers","then","response","status","json","Error","posts","updatedPosts","Promise","all","map","post","user","authorName","name","catch","error","alert","message","handleDelete","postId","data","body","JSON","stringify","text","prevPosts","filter","children","id","fileName","_jsxFileName","lineNumber","columnNumber","reverse","className","to","title","content","onClick","_c","$RefreshReg$"],"sources":["/home/diane/Desktop/bizgo_front/src/pages/post/Blog.js"],"sourcesContent":["import {useContext, useEffect, useState} from \"react\";\nimport './Blog.css'\nimport {AuthContext} from \"../auth/Authenticator\";\nimport {Link} from \"react-router-dom\";\nimport {getUserById} from \"../auth/userHelper\";\nfunction Blog() {\n    const [blogPosts, setBlogPosts] = useState([]);\n    const [authors, setAuthors] = useState([]);\n    const {userId} = useContext(AuthContext);\n\n    useEffect(() => {\n        fetch(\"/fetchBlogPosts\", {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\" : \"application/json\"\n            }\n        })\n            .then((response) => {\n                if (response.status === 200) return response.json();\n                else throw new Error(\"No posts.\")\n            })\n            .then((posts) => {\n                // Fetch author name for each post and update the state accordingly\n                const updatedPosts = Promise.all(posts.map(async (post) => {\n                    const user = await getUserById(post.userId);\n                    return { ...post, authorName: user.name };\n                }));\n                setBlogPosts(updatedPosts);\n            })\n            .catch((error) => alert(error.message));\n    }, []);\n\n    function handleDelete(postId){\n        const data = {\n            postId: postId,\n            userId: userId\n        };\n        fetch(\"/deleteBlogPost\", {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\" : \"application/json\"\n            },\n            body: JSON.stringify(data)\n        })\n        .then((response) => response.text())\n        .then((text) => {\n            if (text === \"OK\"){\n                alert(\"Post deleted.\");\n                setBlogPosts((prevPosts) => prevPosts.filter((post) => post.postId !== postId));\n            }\n            else alert(text);\n        })\n        .catch((error) => alert(\"Something didn't go right.\"))\n    }\n\n    return(\n        <>\n            <h2 id=\"blogTitle\">Blog Posts</h2>\n            {blogPosts && blogPosts.reverse().map((post) => (\n                <div className=\"blogDiv\" key={post.id}>\n                    <Link className=\"postLink\" to={post.title + \"/\" + post.postId}><h2 className=\"postTitle\">{post.title}</h2></Link>\n                <p className=\"postContent\">{post.content}</p>\n                    <p className=\"author\">By : {post.authorName}</p>\n                    { userId === post.userId && <button onClick={() => handleDelete(post.postId)}>Delete Post</button>}\n                </div>\n            ))}\n        </>\n    )\n}\n\nexport default Blog;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}